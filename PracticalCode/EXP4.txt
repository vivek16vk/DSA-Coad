EXP 4) Write a program to implement Circular Linked List.

#include <iostream>

using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class CircularLinkedList {
private:
    Node* head;

public:
    CircularLinkedList() : head(nullptr) {}

    // Insert a new node at the end
    void insert(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
            newNode->next = head; // Points to itself
        } else {
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->next = head; // New node points to head
        }
    }

    // Display the list
    void display() {
        if (!head) {
            cout << "List is empty." << endl;
            return;
        }
        Node* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }

    // Delete a node
    void deleteNode(int value) {
        if (!head) return;

        Node* temp = head;
        Node* prev = nullptr;

        // If the node to be deleted is the head node
        if (temp->data == value) {
            if (temp->next == head) {
                delete temp;
                head = nullptr; // List is now empty
                return;
            } else {
                while (temp->next != head) {
                    temp = temp->next;
                }
                Node* toDelete = head;
                head = head->next;
                temp->next = head; // Update last node to point to new head
                delete toDelete;
                return;
            }
        }

        // Search for the node to be deleted
        do {
            prev = temp;
            temp = temp->next;
        } while (temp != head && temp->data != value);

        // If the node was found
        if (temp == head) {
            cout << "Node not found!" << endl;
            return;
        }

        prev->next = temp->next; // Bypass the node to delete
        delete temp;
    }

    ~CircularLinkedList() {
        if (!head) return;
        Node* current = head;
        Node* nextNode;
        do {
            nextNode = current->next;
            delete current;
            current = nextNode;
        } while (current != head);
    }
};

int main() {
    CircularLinkedList cll;
    cll.insert(10);
    cll.insert(20);
    cll.insert(30);
    cll.insert(40);

    cout << "Circular Linked List: ";
    cll.display();

    cll.deleteNode(20);
    cout << "After deleting 20: ";
    cll.display();

    cll.deleteNode(10);
    cout << "After deleting 10: ";
    cll.display();

    cll.deleteNode(30);
    cout << "After deleting 30: ";
    cll.display();

    cll.deleteNode(40);
    cout << "After deleting 40: ";
    cll.display();

    return 0;
}
