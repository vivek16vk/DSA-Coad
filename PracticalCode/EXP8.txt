EXP 8) Implement a binary search tree (BST) to perform 
insertion, deletion, and search operations.

#include <iostream>

class Node {
public:
    int key;
    Node* left;
    Node* right;

    Node(int value) {
        key = value;
        left = nullptr;
        right = nullptr;
    }
};

class BST {
private:
    Node* root;

    Node* insert(Node* node, int key) {
        if (node == nullptr) {
            return new Node(key);
        }
        if (key < node->key) {
            node->left = insert(node->left, key);
        } else if (key > node->key) {
            node->right = insert(node->right, key);
        }
        return node;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left != nullptr) {
            current = current->left;
        }
        return current;
    }

    Node* deleteNode(Node* root, int key) {
        if (root == nullptr) return root;

        if (key < root->key) {
            root->left = deleteNode(root->left, key);
        } else if (key > root->key) {
            root->right = deleteNode(root->right, key);
        } else {
            // Node with one child or no child
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            Node* temp = minValueNode(root->right);
            root->key = temp->key; // Copy the inorder successor's content to this node
            root->right = deleteNode(root->right, temp->key); // Delete the inorder successor
        }
        return root;
    }

    bool search(Node* node, int key) {
        if (node == nullptr) {
            return false;
        }
        if (node->key == key) {
            return true;
        }
        return key < node->key ? search(node->left, key) : search(node->right, key);
    }

    void inorder(Node* node) {
        if (node) {
            inorder(node->left);
            std::cout << node->key << " ";
            inorder(node->right);
        }
    }

public:
    BST() {
        root = nullptr;
    }

    void insert(int key) {
        root = insert(root, key);
    }

    void deleteNode(int key) {
        root = deleteNode(root, key);
    }

    bool search(int key) {
        return search(root, key);
    }

    void inorder() {
        inorder(root);
        std::cout << std::endl;
    }
};

int main() {
    BST bst;
    bst.insert(50);
    bst.insert(30);
    bst.insert(20);
    bst.insert(40);
    bst.insert(70);
    bst.insert(60);
    bst.insert(80);

    std::cout << "Inorder traversal: ";
    bst.inorder(); // 20 30 40 50 60 70 80

    std::cout << "Searching for 40: " << (bst.search(40) ? "Found" : "Not Found") << std::endl;
    std::cout << "Searching for 90: " << (bst.search(90) ? "Found" : "Not Found") << std::endl;

    bst.deleteNode(20);
    std::cout << "Inorder traversal after deleting 20: ";
    bst.inorder(); // 30 40 50 60 70 80

    bst.deleteNode(30);
    std::cout << "Inorder traversal after deleting 30: ";
    bst.inorder(); // 40 50 60 70 80

    bst.deleteNode(50);
    std::cout << "Inorder traversal after deleting 50: ";
    bst.inorder(); // 40 60 70 80

    return 0;
}
