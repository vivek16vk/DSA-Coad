EXP 9) Implement graph traversal algorithms BFS and DFS...


#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <unordered_set>

class Graph {
public:
    // Number of vertices
    int V;
    // Adjacency list
    std::vector<std::vector<int>> adj;

    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u); // For undirected graph
    }

    // BFS traversal
    void BFS(int start) {
        std::vector<bool> visited(V, false);
        std::queue<int> q;

        visited[start] = true;
        q.push(start);

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            std::cout << node << " ";

            for (int neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        std::cout << std::endl;
    }

    // DFS traversal (iterative)
    void DFS(int start) {
        std::vector<bool> visited(V, false);
        std::stack<int> s;

        s.push(start);

        while (!s.empty()) {
            int node = s.top();
            s.pop();

            if (!visited[node]) {
                visited[node] = true;
                std::cout << node << " ";

                // Push all neighbors onto the stack
                for (int neighbor : adj[node]) {
                    if (!visited[neighbor]) {
                        s.push(neighbor);
                    }
                }
            }
        }
        std::cout << std::endl;
    }

    // DFS traversal (recursive)
    void DFSRecursive(int node, std::vector<bool>& visited) {
        visited[node] = true;
        std::cout << node << " ";

        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                DFSRecursive(neighbor, visited);
            }
        }
    }

    void startDFS(int start) {
        std::vector<bool> visited(V, false);
        DFSRecursive(start, visited);
        std::cout << std::endl;
    }
};

int main() {
    Graph g(5); // Create a graph with 5 vertices
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 4);

    std::cout << "BFS starting from vertex 0: ";
    g.BFS(0);

    std::cout << "DFS starting from vertex 0 (iterative): ";
    g.DFS(0);

    std::cout << "DFS starting from vertex 0 (recursive): ";
    g.startDFS(0);

    return 0;
}
